name: Verify, Build, Release, Deploy

on:
  push:
    branches:
      - master

jobs:
  lint:
    runs-on: [ ubuntu-latest ]
    steps:
      - uses: actions/checkout@v2

      - name: Static code analysis
        run: ./gradlew lint detekt

  unit_tests:
    runs-on: [ ubuntu-latest ]
    steps:
      - uses: actions/checkout@v2

      - name: Unit tests
        run: ./gradlew test

  android_tests:
    runs-on: [ ubuntu-latest ]

    steps:
      - name: Checkout code with history
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Copy Amplify configuration file to raw folder
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "amplifyconfiguration.json"
          json: ${{ secrets.AWS_AMPLIFY_CONFIGURATION }}
          dir: 'app/src/main/res/raw/'

      - name: Copy AWS configuration file to raw folder
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "awsconfiguration.json"
          json: ${{ secrets.AWS_CONFIGURATION }}
          dir: 'app/src/main/res/raw/'

      - name: Create test apks
        run: |
          ./gradlew assembleDebug
          ./gradlew assembleDebugAndroidTest

      - name: Set test artifact names to ENV
        id: set_artifact_names
        run: |
          ARTIFACT_PATHNAME_APK=$(ls app/build/outputs/apk/debug/*.apk | head -n 1)
          ARTIFACT_NAME_APK=$(basename $ARTIFACT_PATHNAME_APK)
          ARTIFACT_PATHNAME_TEST_APK=$(ls app/build/outputs/apk/androidTest/debug/*.apk | head -n 1)
          echo "ARTIFACT_PATHNAME_APK is " ${ARTIFACT_PATHNAME_APK}
          echo "ARTIFACT_NAME_APK is " ${ARTIFACT_NAME_APK}
          echo "ARTIFACT_PATHNAME_TEST_APK is " ${ARTIFACT_PATHNAME_TEST_APK}
          echo "ARTIFACT_PATHNAME_APK=${ARTIFACT_PATHNAME_APK}" >> $GITHUB_ENV
          echo "ARTIFACT_NAME_APK=${ARTIFACT_NAME_APK}" >> $GITHUB_ENV
          echo "ARTIFACT_PATHNAME_TEST_APK=${ARTIFACT_PATHNAME_TEST_APK}" >> $GITHUB_ENV

      - uses: actions/upload-artifact@master
        with:
          name: ${{ env.ARTIFACT_NAME_APK }}
          path: ${{ env.ARTIFACT_PATHNAME_APK }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: huki-c8bc7
          service_account_key: ${{ secrets.FIREBASE_TEST_LAB_SERVICE_ACCOUNT }}

      - name: Run Instrumentation Tests in Firebase Test Lab
        run: gcloud firebase test android run --use-orchestrator --type instrumentation --app ${{ env.ARTIFACT_PATHNAME_APK }} --test ${{ env.ARTIFACT_PATHNAME_TEST_APK }} --device model=blueline,version=28,locale=en,orientation=portrait --use-orchestrator --environment-variables clearPackageData=true

  release:
    needs: [ lint, unit_tests, android_tests ]
    runs-on: [ ubuntu-latest ]
    steps:
      - name: Checkout code with history
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Copy Amplify configuration file to raw folder
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "amplifyconfiguration.json"
          json: ${{ secrets.AWS_AMPLIFY_CONFIGURATION }}
          dir: 'app/src/main/res/raw/'

      - name: Copy AWS configuration file to raw folder
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "awsconfiguration.json"
          json: ${{ secrets.AWS_CONFIGURATION }}
          dir: 'app/src/main/res/raw/'

      - name: Generate Release Bundle AAB
        run: ./gradlew app:bundleRelease

      - name: Set release artifact names to ENV
        id: set_artifact_names
        run: |
          ARTIFACT_PATHNAME_AAB=$(ls app/build/outputs/bundle/release/*.aab | head -n 1)
          ARTIFACT_NAME_AAB=$(basename $ARTIFACT_PATHNAME_AAB)
          echo "ARTIFACT_PATHNAME_AAB is " ${ARTIFACT_PATHNAME_AAB}
          echo "ARTIFACT_NAME_AAB is " ${ARTIFACT_NAME_AAB}
          echo "ARTIFACT_PATHNAME_AAB=${ARTIFACT_PATHNAME_AAB}" >> $GITHUB_ENV
          echo "ARTIFACT_NAME_AAB=${ARTIFACT_NAME_AAB}" >> $GITHUB_ENV

      - name: Sign AAB
        uses: r0adkll/sign-android-release@v1
        id: sign_app
        with:
          releaseDirectory: app/build/outputs/bundle/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}

      - uses: actions/upload-artifact@master
        with:
          name: ${{ env.ARTIFACT_NAME_AAB }}
          path: ${{ steps.sign_app.outputs.signedReleaseFile }}

      - uses: actions/upload-artifact@master
        with:
          name: mapping.txt
          path: app/build/outputs/mapping/release/mapping.txt

      - name: Publish to Google Play Store
        uses: r0adkll/upload-google-play@v1.0.15
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_PUBLISHER_SERVICE_ACCOUNT }}
          packageName: hu.mostoha.mobile.android.huki
          releaseFiles: ${{ env.ARTIFACT_PATHNAME_AAB }}
          track: internal
          whatsNewDirectory: assets/googlePlayStore/whatsnew
          mappingFile: app/build/outputs/mapping/release/mapping.txt
